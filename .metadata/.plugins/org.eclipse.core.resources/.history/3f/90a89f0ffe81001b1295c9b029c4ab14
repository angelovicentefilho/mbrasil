package br.com.mbrasil.scheduler.config;

import static java.util.Objects.isNull;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.aop.framework.AopProxyUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.util.ReflectionUtils;

import br.com.mbrasil.scheduler.annotation.MbScheduled;
import br.com.mbrasil.scheduler.common.Constants;
import br.com.mbrasil.scheduler.domain.ExecOrder;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class MbSchedulingConfiguration
		implements ApplicationContextAware, BeanPostProcessor, ApplicationListener<ContextRefreshedEvent> {

	private final Set<Class<?>> nonAnnotatedClasses = Collections.newSetFromMap(new ConcurrentHashMap<>(64));

	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		Constants.Global.applicationContext = applicationContext;
	}

	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);
		if (this.nonAnnotatedClasses.contains(targetClass))
			return bean;
		Method[] methods = ReflectionUtils.getAllDeclaredMethods(bean.getClass());
		if (isNull(methods)) {
			return bean;
		}
		for (Method method : methods) {
			MbScheduled annoScheduled = AnnotationUtils.findAnnotation(method, MbScheduled.class);
			if (isNull(annoScheduled) || isEmpty(method)) {
				continue;
			}
			List<ExecOrder> execOrderList = Constants.execOrderMap.computeIfAbsent(beanName, k -> new ArrayList<>());
			ExecOrder execOrder = new ExecOrder();
			execOrder.setBean(bean);
			execOrder.setBeanName(beanName);
			execOrder.setMethodName(method.getName());
			execOrder.setDesc(annoScheduled.desc());
			execOrder.setCron(annoScheduled.cron());
			execOrder.setAutoStartup(annoScheduled.autoStartup());
			execOrderList.add(execOrder);
			this.nonAnnotatedClasses.add(targetClass);
		}
		return bean;
	}

	private boolean isEmpty(Method method) {
		return 0 == method.getDeclaredAnnotations().length;
	}

}
